

# This test is extracted from the v1.0.0 specification

# comments

# This is a full-line comment
key = "value"  # This is a comment at the end of a line
another = "# This is not a comment"

# Key/Value Pair

[!4]
key = "value"

# TODO: we cannot test that this is incorrect. It's probably accepted
# to have the definition on two lines
# key = # INVALID

# TODO: double entry on the same line error, not yet implemented
# first = "Tom" last = "Preston-Werner" # INVALID

# Keys

[!4]
key = "value"
bare_key = "value"
bare-key = "value"
1234 = "value"

"127.0.0.1" = "value"
"character encoding" = "value"
"ʎǝʞ" = "value"
'key2' = "value"
'quoted "value"' = "value"

# TODO: we cannot test that this is incorrect
# = "no key name"  # INVALID
"" = "blank"     # VALID but discouraged
[!4] # Duplicate
'' = 'blank'     # VALID but discouraged

# JSON
# {
#  "name": "Orange",
#  "physical": {
#    "color": "orange",
#    "shape": "round"
#  },
#  "site": {
#    "google.com": true
#  }
# }

name = "Orange"
physical.color = "orange"
physical.shape = "round"
site."google.com" = true

fruit.name = "banana"     # this is best practice
fruit. color = "yellow"    # same as fruit.color
fruit . flavor = "banana"   # same as fruit.flavor

# DO NOT DO THIS
[!4]
name = "Tom"
[!4]
name = "Pradyun"

# THIS WILL NOT WORK
spelling = "favorite"
[!4]
"spelling" = "favourite"

# This makes the key "fruit" into a table.
fruit.apple.smooth = true

# So then you can add to the table "fruit" like so:
fruit.orange = 2

# THE FOLLOWING IS INVALID

# This defines the value of fruit.apple to be an integer.
fruit.pomme = 1

# But then this treats fruit.apple like it's a table.
# You can't turn an integer into a table.
[!2]
fruit.pomme.smooth = true

# VALID BUT DISCOURAGED

apple.type = "fruit"
orange.type = "fruit"

apple.skin = "thin"
orange.skin = "thick"

apple.color = "red"
orange.color = "orange"

# RECOMMENDED

apple2.type = "fruit"
apple2.skin = "thin"
apple2.color = "red"

orange2.type = "fruit"
orange2.skin = "thick"
orange2.color = "orange"

# TODO: these keys should be accepted, they are currently not
# 3.14.159 = "pi"
# 3.14159 = "pi"

# JSON
# { "3": { "14159": "pi" } }

# String

str = "I'm a string. \"You can quote me\". Name\tJos\u00E9\nLocation\tSF."

str1 = """
Roses are red
Violets are blue"""

# On a Unix system, the above multi-line string will most likely be the same as:
str2 = "Roses are red\nViolets are blue"

# On a Windows system, it will most likely be equivalent to:
str3 = "Roses are red\r\nViolets are blue"

# The following strings are byte-for-byte equivalent:
str1_ = "The quick brown fox jumps over the lazy dog."

str2_ = """
The quick brown \


  fox jumps over \
    the lazy dog."""

str3_ = """\
       The quick brown \
       fox jumps over \
       the lazy dog.\
       """


str4 = """Here are two quotation marks: "". Simple enough."""
# str5 = """Here are three quotation marks: """."""  # INVALID
str5 = """Here are three quotation marks: ""\"."""
str6 = """Here are fifteen quotation marks: ""\"""\"""\"""\"""\"."""

# "This," she said, "is just a pointless statement."
str7 = """"This," she said, "is just a pointless statement.""""

# What you see is what you get.
winpath  = 'C:\Users\nodejs\templates'
winpath2 = '\\ServerX\admin$\system32\'
quoted   = 'Tom "Dubs" Preston-Werner'
regex    = '<\i\c*\s*>'

regex2 = '''I [dw]on't need \d{2} apples'''
lines  = '''
The first newline is
trimmed in raw strings.
   All other whitespace
   is preserved.
'''

quot15 = '''Here are fifteen quotation marks: """""""""""""""'''

# apos15 = '''Here are fifteen apostrophes: ''''''''''''''''''  # INVALID
apos15 = "Here are fifteen apostrophes: '''''''''''''''"

# 'That,' she said, 'is still pointless.'
str7_ = ''''That,' she said, 'is still pointless.''''

# Integer

int1 = +99
int2 = 42
int3 = 0
int4 = -17

int5 = 1_000
int6 = 5_349_221
int7 = 53_49_221  # Indian number system grouping
int8 = 1_2_3_4_5  # VALID but discouraged

# hexadecimal with prefix `0x`
hex1 = 0xDEADBEEF
hex2 = 0xdeadbeef
hex3 = 0xdead_beef

# octal with prefix `0o`
oct1 = 0o01234567
oct2 = 0o755 # useful for Unix file permissions

# binary with prefix `0b`
bin1 = 0b11010110

# Float

# fractional
flt1 = +1.0
flt2 = 3.1415
flt3 = -0.01

# exponent
flt4 = 5e+22
flt5 = 1e06
flt6 = -2E-2

# both
flt7 = 6.626e-34

# INVALID FLOATS
# invalid_float_1 = .7
# invalid_float_2 = 7.
# invalid_float_3 = 3.e+20

flt8 = 224_617.445_991_228
flt9 = -0.0
flt10 = +0.0

# infinity
sf1 = inf  # positive infinity
sf2 = +inf # positive infinity
sf3 = -inf # negative infinity

# not a number
sf4 = nan  # actual sNaN/qNaN encoding is implementation-specific
sf5 = +nan # same as `nan`

# Commented because differs on Macosx
# sf6 = -nan # valid, actual encoding is implementation-specific

# Boolean

bool1 = true
bool2 = false

# Offset Date-Time

odt1 = 1979-05-27T07:32:00Z
odt2 = 1979-05-27T00:32:00-07:00
odt3 = 1979-05-27T00:32:00.999999-07:00

odt4 = 1979-05-27 07:32:00Z

# Local Date-Time

ldt1 = 1979-05-27T07:32:00
ldt2 = 1979-05-27T00:32:00.999999

# Local Date

ld1 = 1979-05-27

# Local Time

lt1 = 07:32:00
lt2 = 00:32:00.999999

# Array

integers = [ 1, 2, 3 ]
colors = [ "red", "yellow", "green" ]
nested_arrays_of_ints = [ [ 1, 2 ], [3, 4, 5] ]
nested_mixed_array = [ [ 1, 2 ], ["a", "b", "c"] ]
string_array = [ "all", 'strings', """are the same""", '''type''' ]

# Mixed-type arrays are allowed
numbers = [ 0.1, 0.2, 0.5, 1, 2, 5 ]
contributors = [
  "Foo Bar <foo@example.com>",
  { name = "Baz Qux", email = "bazqux@example.com", url = "https://example.com/bazqux" }
]

integers2 = [
  1, 2, 3
]

integers3 = [
  1,
  2, # this is ok
]

# Table

[table]

[table-1]
key1 = "some string"
key2 = 123

[table-2]
key1 = "another string"
key2 = 456

[dog."tater.man"]
type.name = "pug"

# JSON
# { "dog": { "tater.man": { "type": { "name": "pug" } } } }

[a.b.c]            # this is best practice
[ d.e.f ]          # same as [d.e.f]
[ g .  h  . i ]    # same as [g.h.i]
[ j . "ʞ" . 'l' ]  # same as [j."ʞ".'l']

# [x] you
# [x.y] don't
# [x.y.z] need these
[x.y.z.w] # for this to work

[!16] # TODO The specification is weird here, as [x] has already been defined
[x] # defining a super-table afterward is ok

# DO NOT DO THIS

[fruit2]
apple = "red"

[!16]
[fruit2]
orange = "orange"

# DO NOT DO THIS EITHER

[fruit3]
apple.color = "red"

[!16]
[fruit3.apple]
texture = "smooth"

# VALID BUT DISCOURAGED
[fruit4.apple]
[animal]
[fruit4.orange]

# RECOMMENDED
[fruit5.apple]
[fruit5.orange]
[animal2]

# Top-level table begins.
name = "Fido"
breed = "pug"

# Top-level table ends.
[owner]
name = "Regina Dogman"
member_since = 1999-08-04

fruit.apple.color = "red"
# Defines a table named fruit
# Defines a table named fruit.apple

fruit.apple.taste.sweet = true
# Defines a table named fruit.apple.taste
# fruit and fruit.apple were already created

[fruit6]
apple.color = "red"
apple.taste.sweet = true

[!16]
[fruit6.apple]  # INVALID
[!16]
[fruit6.apple.taste]  # INVALID

[fruit.apple.texture]  # you can add sub-tables
smooth = true

# Inline Table

name = { first = "Tom", last = "Preston-Werner" }
point = { x = 1, y = 2 }
animal = { type.name = "pug" }

[name2]
first = "Tom"
last = "Preston-Werner"

[point]
x = 1
y = 2

[animal3]
type.name = "pug"
type.color = "orange"

[product]
type = { name = "Nail" }
# TODO: make this invalid in pedantic mode
type.edible = false  # INVALID

[product2]
type.name = "Nail"
[!4]
type = { edible = false }  # INVALID

# Array of Tables

[[products3]]
name = "Hammer"
sku = 738594937

[[products3]]  # empty table within the array

[[products3]]
name = "Nail"
sku = 284758393

color = "gray"

# JSON
# {
#  "products": [
#    { "name": "Hammer", "sku": 738594937 },
#    { },
#    { "name": "Nail", "sku": 284758393, "color": "gray" }
#  ]
# }

[[fruits]]
name = "apple"

[fruits.physical]  # subtable
color = "red"
shape = "round"

[[fruits.varieties]]  # nested array of tables
name = "red delicious"

[[fruits.varieties]]
name = "granny smith"


[[fruits]]
name = "banana"

[[fruits.varieties]]
name = "plantain"

# JSON
# {
#  "fruits": [
#    {
#      "name": "apple",
#      "physical": {
#        "color": "red",
#        "shape": "round"
#      },
#      "varieties": [
#        { "name": "red delicious" },
#        { "name": "granny smith" }
#      ]
#    },
#    {
#      "name": "banana",
#      "varieties": [
#        { "name": "plantain" }
#      ]
#    }
#  ]
# }

# INVALID TOML DOC
[fruitx.physical]  # subtable, but to which parent element should it belong?
color = "red"
shape = "round"

[!7]
[[fruitx]]  # parser must throw an error upon discovering that "fruit" is
           # an array rather than a table

[]

# INVALID TOML DOC
fruits3 = []

# TODO: make this invalid
[[fruits3]] # Not allowed

# INVALID TOML DOC
[[fruits]]
name = "apple"

[[fruits.varieties]]
name = "red delicious"

# INVALID: This table conflicts with the previous array of tables
[!6]
[fruits.varieties]

[fruits.physical]
color = "red"
shape = "round"

# INVALID: This array of tables conflicts with the previous table
[!7]
[[fruits.physical]]

points = [ { x = 1, y = 2, z = 3 },
           { x = 7, y = 8, z = 9 },
           { x = 2, y = 4, z = 8 } ]

