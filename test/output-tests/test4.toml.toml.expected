

# This test is extracted from the v1.0.0 specification


# comments


# This is a full-line comment

# This is a comment at the end of a line
key = "value"

# Key/Value Pair


another = "# This is not a comment"
bare_key = "value"
bare-key = "value"

1234 = "value"
"127.0.0.1" = "value"
"character encoding" = "value"
"ʎǝʞ" = "value"
key2 = "value"

# TODO: we cannot test that this is incorrect

# = "no key name"  # INVALID

'quoted "value"' = "value" # VALID but discouraged
'' = "blank" # Duplicate
name = "Orange"
spelling = "favorite"

str = """
I'm a string. \"You can quote me\". Name\tJosé
Location\tSF."""

# On a Unix system, the above multi-line string will most likely be the same as:

str1 = """
Roses are red
Violets are blue"""

# On a Windows system, it will most likely be equivalent to:

str2 = """
Roses are red
Violets are blue"""

# The following strings are byte-for-byte equivalent:

str3 = """
Roses are red\u000d
Violets are blue"""

str1_ = "The quick brown fox jumps over the lazy dog."

str2_ = "The quick brown fox jumps over the lazy dog."


str3_ = "The quick brown fox jumps over the lazy dog."
# str5 = """Here are three quotation marks: """."""  # INVALID

str4 = "Here are two quotation marks: \"\". Simple enough."
str5 = "Here are three quotation marks: \"\"\"."

# "This," she said, "is just a pointless statement."

str6 = "Here are fifteen quotation marks: \"\"\"\"\"\"\"\"\"\"\"\"\"\"\"."

# What you see is what you get.

str7 = "\"This,\" she said, \"is just a pointless statement.\""
winpath = "C:\\Users\\nodejs\\templates"
winpath2 = "\\\\ServerX\\admin$\\system32\\"
quoted = "Tom \"Dubs\" Preston-Werner"

regex = "<\\i\\c*\\s*>"
regex2 = "I [dw]on't need \\d{2} apples"

lines = """
The first newline is
trimmed in raw strings.
   All other whitespace
   is preserved.
"""

# apos15 = '''Here are fifteen apostrophes: ''''''''''''''''''  # INVALID

quot15 = "Here are fifteen quotation marks: \"\"\"\"\"\"\"\"\"\"\"\"\"\"\""

# 'That,' she said, 'is still pointless.'

apos15 = "Here are fifteen apostrophes: '''''''''''''''"

# Integer


str7_ = "'That,' she said, 'is still pointless.'"
int1 = +99
int2 = 42
int3 = 0

int4 = -17
int5 = 1_000
int6 = 5_349_221 # Indian number system grouping
int7 = 53_49_221 # VALID but discouraged

# hexadecimal with prefix `0x`

int8 = 1_2_3_4_5
hex1 = 0xDEADBEEF
hex2 = 0xdeadbeef

# octal with prefix `0o`

hex3 = 0xdead_beef
oct1 = 0o01234567 # useful for Unix file permissions

# binary with prefix `0b`

oct2 = 0o755

# Float


# fractional

bin1 = 0b11010110
flt1 = +1.0
flt2 = 3.1415

# exponent

flt3 = -0.01
flt4 = 5e+22
flt5 = 1e06

# both

flt6 = -2E-2

# INVALID FLOATS

# invalid_float_1 = .7

# invalid_float_2 = 7.

# invalid_float_3 = 3.e+20


flt7 = 6.626e-34
flt8 = 224_617.445_991_228
flt9 = -0.0

# infinity

flt10 = +0.0 # positive infinity
sf1 = inf # positive infinity
sf2 = +inf # negative infinity

# not a number

sf3 = -inf # actual sNaN/qNaN encoding is implementation-specific
sf4 = nan # same as `nan`
sf5 = +nan # valid, actual encoding is implementation-specific

# Boolean


sf6 = -nan
bool1 = true

# Offset Date-Time


bool2 = false
odt1 = 1979-05-27T07:32:00Z
odt2 = 1979-05-27T00:32:00-07:00

odt3 = 1979-05-27T00:32:00.999999-07:00

# Local Date-Time


odt4 = 1979-05-27 07:32:00Z
ldt1 = 1979-05-27T07:32:00

# Local Date


ldt2 = 1979-05-27T00:32:00.999999

# Local Time


ld1 = 1979-05-27
lt1 = 07:32:00

# Array


lt2 = 00:32:00.999999
integers = [ 1, 2, 3 ]
colors = [ "red", "yellow", "green" ]
nested_arrays_of_ints = [ [ 1, 2 ], [ 3, 4, 5 ] ]
nested_mixed_array = [ [ 1, 2 ], [ "a", "b", "c" ] ]

# Mixed-type arrays are allowed

string_array = [ "all", "strings", "are the same", "type" ]
numbers = [ 0.1, 0.2, 0.5, 1, 2, 5 ]

contributors = [ "Foo Bar <foo@example.com>", { name = "Baz Qux", email = "bazqux@example.com", url = "https://example.com/bazqux" } ]

integers2 = [ 1, 2, 3 ]
# this is ok

# Table


integers3 = [ 1, 2 ]
[physical]
color = "orange"
shape = "round"
[site]

"google.com" = true # this is best practice
[fruit]
name = "banana" # same as fruit.color
color = "yellow" # same as fruit.flavor

# DO NOT DO THIS

flavor = "banana"

# THE FOLLOWING IS INVALID


# This defines the value of fruit.apple to be an integer.

orange = 2

# But then this treats fruit.apple like it's a table.

# You can't turn an integer into a table.

pomme = 1
[fruit.apple]

# So then you can add to the table "fruit" like so:

smooth = true
[fruit.apple.texture]

# Inline Table


smooth = true
[fruit.apple.texture.name]
first = "Tom"
last = "Preston-Werner"
[fruit.apple.texture.point]
x = 1
y = 2

[fruit.apple.texture.animal.type]
name = "pug"
[apple]
type = "fruit"
skin = "thin"
color = "red"
[orange]

type = "fruit"

skin = "thick"

# RECOMMENDED


color = "orange"
[apple2]
type = "fruit"
skin = "thin"

color = "red"
[orange2]
type = "fruit"
skin = "thick"

# TODO: these keys should be accepted, they are currently not

# 3.14.159 = "pi"

# 3.14159 = "pi"


# JSON

# { "3": { "14159": "pi" } }


# String


color = "orange"

[table]
[table-1]
key1 = "some string"

key2 = 123
[table-2]
key1 = "another string"

key2 = 456
[dog."tater.man".type]

# JSON

# { "dog": { "tater.man": { "type": { "name": "pug" } } } }


name = "pug" # this is best practice
[a.b.c] # same as [d.e.f]
[d.e.f] # same as [g.h.i]
[g.h.i] # same as [j."ʞ".'l']

# [x] you

# [x.y] don't

# [x.y.z] need these

[j."ʞ".l] # for this to work

[x.y.z.w] # TODO The specification is weird here, as [x] has already been defined
[fruit2]

apple = "red"

# DO NOT DO THIS EITHER


orange = "orange"
[fruit3]

# VALID BUT DISCOURAGED

texture = "smooth"
[fruit3.apple]

color = "red"
[fruit4.apple]

# RECOMMENDED

[fruit4.orange]
[animal]
[fruit5.apple]
[fruit5.orange]

# Top-level table begins.

[animal2]
name = "Fido"

# Top-level table ends.

breed = "pug"
[owner]
name = "Regina Dogman"

member_since = 1999-08-04
[owner.fruit.apple]
# Defines a table named fruit

# Defines a table named fruit.apple


color = "red"
[owner.fruit.apple.taste]
# Defines a table named fruit.apple.taste

# fruit and fruit.apple were already created


sweet = true
[fruit6.apple]
color = "red"
[fruit6.apple.taste]

sweet = true
[name2]
first = "Tom"

last = "Preston-Werner"
[point]
x = 1

y = 2
[animal3.type]
name = "pug"

color = "orange"
# TODO: make this invalid in pedantic mode

[product.type] # INVALID
name = "Nail"

edible = false
[product2.type]
name = "Nail"
[[products3]]
name = "Hammer"

sku = 738594937 # empty table within the array

[[products3]]
[[products3]]
name = "Nail"

sku = 284758393

# JSON

# {

#  "products": [

#    { "name": "Hammer", "sku": 738594937 },

#    { },

#    { "name": "Nail", "sku": 284758393, "color": "gray" }

#  ]

# }


color = "gray"
[[fruits]]

name = "apple" # subtable
[fruits.physical]
color = "red"

shape = "round" # nested array of tables
[[fruits.varieties]]

name = "red delicious"
[[fruits.varieties]]


name = "granny smith"
[[fruits]]

name = "banana"
[[fruits.varieties]]

# JSON

# {

#  "fruits": [

#    {

#      "name": "apple",

#      "physical": {

#        "color": "red",

#        "shape": "round"

#      },

#      "varieties": [

#        { "name": "red delicious" },

#        { "name": "granny smith" }

#      ]

#    },

#    {

#      "name": "banana",

#      "varieties": [

#        { "name": "plantain" }

#      ]

#    }

#  ]

# }


# INVALID TOML DOC

name = "plantain" # subtable, but to which parent element should it belong?
[[fruits]]

name = "apple"
[[fruits.varieties]]

# INVALID: This table conflicts with the previous array of tables

name = "red delicious"
[fruits.physical]
color = "red"

# INVALID: This array of tables conflicts with the previous table

shape = "round"
[[fruits.physical.points]]
x = 1
y = 2
z = 3
[[fruits.physical.points]]
x = 7
y = 8
z = 9
[[fruits.physical.points]]
x = 2
y = 4
z = 8
[fruitx.physical]
color = "red"

shape = "round"

# INVALID TOML DOC

[[fruits3]]

